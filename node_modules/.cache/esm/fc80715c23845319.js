let axios,history;_238‍.x([["me",()=>me],["authenticate",()=>authenticate],["logout",()=>logout],["default",()=>_238‍anonymous]]);_238‍.w("axios",[["default",["axios"],function(v){axios=v}]]);_238‍.w("../history",[["default",["history"],function(v){history=v}]]);

const TOKEN = 'token';
/**
 * ACTION TYPES
 */

const SET_AUTH = 'SET_AUTH';
/**
 * ACTION CREATORS
 */

const setAuth = auth => ({
  type: SET_AUTH,
  auth
});
/**
 * THUNK CREATORS
 */


       const me = () => async dispatch => {
  const token = window.localStorage.getItem(TOKEN);

  if (token) {
    const res = await axios.get('/auth/me', {
      headers: {
        authorization: token
      }
    });
    return dispatch(setAuth(res.data));
  }
};
       const authenticate = (username, password, method) => async dispatch => {
  try {
    const res = await axios.post(`/auth/${method}`, {
      username,
      password
    });
    window.localStorage.setItem(TOKEN, res.data.token);
    dispatch(me());
  } catch (authError) {
    return dispatch(setAuth({
      error: authError
    }));
  }
};
       const logout = () => {
  window.localStorage.removeItem(TOKEN);
  history.push('/login');
  return {
    type: SET_AUTH,
    auth: {}
  };
};
/**
 * REDUCER
 */

               function  _238‍anonymous(state = {}, action) {
  switch (action.type) {
    case SET_AUTH:
      return action.auth;

    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsImhpc3RvcnkiLCJUT0tFTiIsIlNFVF9BVVRIIiwic2V0QXV0aCIsImF1dGgiLCJ0eXBlIiwibWUiLCJkaXNwYXRjaCIsInRva2VuIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInJlcyIsImdldCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwiZGF0YSIsImF1dGhlbnRpY2F0ZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJtZXRob2QiLCJwb3N0Iiwic2V0SXRlbSIsImF1dGhFcnJvciIsImVycm9yIiwibG9nb3V0IiwicmVtb3ZlSXRlbSIsInB1c2giLCJzdGF0ZSIsImFjdGlvbiJdLCJzb3VyY2VSb290IjoiL1VzZXJzL2NocmlzYi9GdWxsc3RhY2svQm9pbGVyTWFrZXItdGVtcGxhdGUvY2xpZW50L3N0b3JlLyIsInNvdXJjZXMiOlsiYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgaGlzdG9yeSBmcm9tICcuLi9oaXN0b3J5J1xuXG5jb25zdCBUT0tFTiA9ICd0b2tlbidcblxuLyoqXG4gKiBBQ1RJT04gVFlQRVNcbiAqL1xuY29uc3QgU0VUX0FVVEggPSAnU0VUX0FVVEgnXG5cbi8qKlxuICogQUNUSU9OIENSRUFUT1JTXG4gKi9cbmNvbnN0IHNldEF1dGggPSBhdXRoID0+ICh7dHlwZTogU0VUX0FVVEgsIGF1dGh9KVxuXG4vKipcbiAqIFRIVU5LIENSRUFUT1JTXG4gKi9cbmV4cG9ydCBjb25zdCBtZSA9ICgpID0+IGFzeW5jIGRpc3BhdGNoID0+IHtcbiAgY29uc3QgdG9rZW4gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oVE9LRU4pXG4gIGlmICh0b2tlbikge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnL2F1dGgvbWUnLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRva2VuXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZGlzcGF0Y2goc2V0QXV0aChyZXMuZGF0YSkpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGF1dGhlbnRpY2F0ZSA9ICh1c2VybmFtZSwgcGFzc3dvcmQsIG1ldGhvZCkgPT4gYXN5bmMgZGlzcGF0Y2ggPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoYC9hdXRoLyR7bWV0aG9kfWAsIHt1c2VybmFtZSwgcGFzc3dvcmR9KVxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShUT0tFTiwgcmVzLmRhdGEudG9rZW4pXG4gICAgZGlzcGF0Y2gobWUoKSlcbiAgfSBjYXRjaCAoYXV0aEVycm9yKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKHNldEF1dGgoe2Vycm9yOiBhdXRoRXJyb3J9KSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbG9nb3V0ID0gKCkgPT4ge1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oVE9LRU4pXG4gIGhpc3RvcnkucHVzaCgnL2xvZ2luJylcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfQVVUSCxcbiAgICBhdXRoOiB7fVxuICB9XG59XG5cbi8qKlxuICogUkVEVUNFUlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGF0ZSA9IHt9LCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgU0VUX0FVVEg6XG4gICAgICByZXR1cm4gYWN0aW9uLmF1dGhcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsWUFBcEI7QUFFQSxNQUFNQyxLQUFLLEdBQUcsT0FBZDtBQUVBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyxRQUFRLEdBQUcsVUFBakI7QUFFQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHQyxJQUFJLEtBQUs7RUFBQ0MsSUFBSSxFQUFFSCxRQUFQO0VBQWlCRTtBQUFqQixDQUFMLENBQXBCO0FBRUE7QUFDQTtBQUNBOzs7QUFDQSxPQUFPLE1BQU1FLEVBQUUsR0FBRyxNQUFNLE1BQU1DLFFBQU4sSUFBa0I7RUFDeEMsTUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JDLE9BQXBCLENBQTRCVixLQUE1QixDQUFkOztFQUNBLElBQUlPLEtBQUosRUFBVztJQUNULE1BQU1JLEdBQUcsR0FBRyxNQUFNYixLQUFLLENBQUNjLEdBQU4sQ0FBVSxVQUFWLEVBQXNCO01BQ3RDQyxPQUFPLEVBQUU7UUFDUEMsYUFBYSxFQUFFUDtNQURSO0lBRDZCLENBQXRCLENBQWxCO0lBS0EsT0FBT0QsUUFBUSxDQUFDSixPQUFPLENBQUNTLEdBQUcsQ0FBQ0ksSUFBTCxDQUFSLENBQWY7RUFDRDtBQUNGLENBVk07QUFZUCxPQUFPLE1BQU1DLFlBQVksR0FBRyxDQUFDQyxRQUFELEVBQVdDLFFBQVgsRUFBcUJDLE1BQXJCLEtBQWdDLE1BQU1iLFFBQU4sSUFBa0I7RUFDNUUsSUFBSTtJQUNGLE1BQU1LLEdBQUcsR0FBRyxNQUFNYixLQUFLLENBQUNzQixJQUFOLENBQVksU0FBUUQsTUFBTyxFQUEzQixFQUE4QjtNQUFDRixRQUFEO01BQVdDO0lBQVgsQ0FBOUIsQ0FBbEI7SUFDQVYsTUFBTSxDQUFDQyxZQUFQLENBQW9CWSxPQUFwQixDQUE0QnJCLEtBQTVCLEVBQW1DVyxHQUFHLENBQUNJLElBQUosQ0FBU1IsS0FBNUM7SUFDQUQsUUFBUSxDQUFDRCxFQUFFLEVBQUgsQ0FBUjtFQUNELENBSkQsQ0FJRSxPQUFPaUIsU0FBUCxFQUFrQjtJQUNsQixPQUFPaEIsUUFBUSxDQUFDSixPQUFPLENBQUM7TUFBQ3FCLEtBQUssRUFBRUQ7SUFBUixDQUFELENBQVIsQ0FBZjtFQUNEO0FBQ0YsQ0FSTTtBQVVQLE9BQU8sTUFBTUUsTUFBTSxHQUFHLE1BQU07RUFDMUJoQixNQUFNLENBQUNDLFlBQVAsQ0FBb0JnQixVQUFwQixDQUErQnpCLEtBQS9CO0VBQ0FELE9BQU8sQ0FBQzJCLElBQVIsQ0FBYSxRQUFiO0VBQ0EsT0FBTztJQUNMdEIsSUFBSSxFQUFFSCxRQUREO0lBRUxFLElBQUksRUFBRTtFQUZELENBQVA7QUFJRCxDQVBNO0FBU1A7QUFDQTtBQUNBOztBQUNBLGVBQWUsVUFBU3dCLEtBQUssR0FBRyxFQUFqQixFQUFxQkMsTUFBckIsRUFBNkI7RUFDMUMsUUFBUUEsTUFBTSxDQUFDeEIsSUFBZjtJQUNFLEtBQUtILFFBQUw7TUFDRSxPQUFPMkIsTUFBTSxDQUFDekIsSUFBZDs7SUFDRjtNQUNFLE9BQU93QixLQUFQO0VBSko7QUFNRCJ9