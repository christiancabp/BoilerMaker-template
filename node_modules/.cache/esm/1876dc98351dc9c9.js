let expect,me,logout,axios,MockAdapter,configureMockStore,thunkMiddleware,history;_351‍.w("chai",[["expect",["expect"],function(v){expect=v}]]);_351‍.w("./auth",[["me",["me"],function(v){me=v}],["logout",["logout"],function(v){logout=v}]]);_351‍.w("axios",[["default",["axios"],function(v){axios=v}]]);_351‍.w("axios-mock-adapter",[["default",["MockAdapter"],function(v){MockAdapter=v}]]);_351‍.w("redux-mock-store",[["default",["configureMockStore"],function(v){configureMockStore=v}]]);_351‍.w("redux-thunk",[["default",["thunkMiddleware"],function(v){thunkMiddleware=v}]]);_351‍.w("../history",[["default",["history"],function(v){history=v}]]);/* global describe beforeEach afterEach it */







const middlewares = [thunkMiddleware];
const mockStore = configureMockStore(middlewares);
describe('thunk creators', () => {
  let store;
  let mockAxios;
  const initialState = {
    user: {}
  };
  beforeEach(() => {
    //no browser available, we need to stub out localStorage
    global.window = {
      localStorage: {
        removeItem: () => {},
        getItem: () => {
          return 'some-token';
        },
        setItem: () => {}
      }
    };
    mockAxios = new MockAdapter(axios);
    store = mockStore(initialState);
  });
  afterEach(() => {
    mockAxios.restore();
    store.clearActions();
  });
  describe('me', () => {
    describe('with valid token', () => {
      beforeEach(() => {
        global.window = {
          localStorage: {
            removeItem: () => {},
            getItem: () => {
              return 'some-token';
            },
            setItem: () => {}
          }
        };
      });
      it('eventually dispatches the SET_AUTH action', async () => {
        const fakeUser = {
          username: 'Cody'
        };
        mockAxios.onGet('/auth/me').replyOnce(200, fakeUser);
        await store.dispatch(me());
        const actions = store.getActions();
        expect(actions[0].type).to.be.equal('SET_AUTH');
        expect(actions[0].auth).to.be.deep.equal(fakeUser);
      });
    });
    describe('without valid token', () => {
      beforeEach(() => {
        global.window = {
          localStorage: {
            removeItem: () => {},
            getItem: () => {},
            setItem: () => {}
          }
        };
      });
      it('does not dispatch GET USER action', async () => {
        const fakeUser = {
          username: 'Cody'
        };
        mockAxios.onGet('/auth/me').replyOnce(200, fakeUser);
        await store.dispatch(me());
        const actions = store.getActions();
        expect(actions.length).to.equal(0);
      });
    });
  });
  describe('logout', () => {
    it('logout: eventually dispatches the SET_AUTH action withan empty object', async () => {
      mockAxios.onPost('/auth/logout').replyOnce(204);
      await store.dispatch(logout());
      const actions = store.getActions();
      expect(actions[0].type).to.be.equal('SET_AUTH');
      expect(history.location.pathname).to.be.equal('/login');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBlY3QiLCJtZSIsImxvZ291dCIsImF4aW9zIiwiTW9ja0FkYXB0ZXIiLCJjb25maWd1cmVNb2NrU3RvcmUiLCJ0aHVua01pZGRsZXdhcmUiLCJoaXN0b3J5IiwibWlkZGxld2FyZXMiLCJtb2NrU3RvcmUiLCJkZXNjcmliZSIsInN0b3JlIiwibW9ja0F4aW9zIiwiaW5pdGlhbFN0YXRlIiwidXNlciIsImJlZm9yZUVhY2giLCJnbG9iYWwiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJhZnRlckVhY2giLCJyZXN0b3JlIiwiY2xlYXJBY3Rpb25zIiwiaXQiLCJmYWtlVXNlciIsInVzZXJuYW1lIiwib25HZXQiLCJyZXBseU9uY2UiLCJkaXNwYXRjaCIsImFjdGlvbnMiLCJnZXRBY3Rpb25zIiwidHlwZSIsInRvIiwiYmUiLCJlcXVhbCIsImF1dGgiLCJkZWVwIiwibGVuZ3RoIiwib25Qb3N0IiwibG9jYXRpb24iLCJwYXRobmFtZSJdLCJzb3VyY2VSb290IjoiL1VzZXJzL2NocmlzYi9GdWxsc3RhY2svQm9pbGVyTWFrZXItdGVtcGxhdGUvY2xpZW50L3N0b3JlLyIsInNvdXJjZXMiOlsiYXV0aC5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBkZXNjcmliZSBiZWZvcmVFYWNoIGFmdGVyRWFjaCBpdCAqL1xuXG5pbXBvcnQge2V4cGVjdH0gZnJvbSAnY2hhaSdcbmltcG9ydCB7bWUsIGxvZ291dH0gZnJvbSAnLi9hdXRoJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IE1vY2tBZGFwdGVyIGZyb20gJ2F4aW9zLW1vY2stYWRhcHRlcidcbmltcG9ydCBjb25maWd1cmVNb2NrU3RvcmUgZnJvbSAncmVkdXgtbW9jay1zdG9yZSdcbmltcG9ydCB0aHVua01pZGRsZXdhcmUgZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQgaGlzdG9yeSBmcm9tICcuLi9oaXN0b3J5J1xuXG5jb25zdCBtaWRkbGV3YXJlcyA9IFt0aHVua01pZGRsZXdhcmVdXG5jb25zdCBtb2NrU3RvcmUgPSBjb25maWd1cmVNb2NrU3RvcmUobWlkZGxld2FyZXMpXG5cbmRlc2NyaWJlKCd0aHVuayBjcmVhdG9ycycsICgpID0+IHtcbiAgbGV0IHN0b3JlXG4gIGxldCBtb2NrQXhpb3NcblxuICBjb25zdCBpbml0aWFsU3RhdGUgPSB7dXNlcjoge319XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy9ubyBicm93c2VyIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBzdHViIG91dCBsb2NhbFN0b3JhZ2VcbiAgICBnbG9iYWwud2luZG93ID0ge1xuICAgICAgbG9jYWxTdG9yYWdlOiB7XG4gICAgICAgIHJlbW92ZUl0ZW06ICgpID0+IHt9LFxuICAgICAgICBnZXRJdGVtOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuICdzb21lLXRva2VuJ1xuICAgICAgICB9LFxuICAgICAgICBzZXRJdGVtOiAoKSA9PiB7fVxuICAgICAgfVxuICAgIH1cbiAgICBtb2NrQXhpb3MgPSBuZXcgTW9ja0FkYXB0ZXIoYXhpb3MpXG4gICAgc3RvcmUgPSBtb2NrU3RvcmUoaW5pdGlhbFN0YXRlKVxuICB9KVxuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgbW9ja0F4aW9zLnJlc3RvcmUoKVxuICAgIHN0b3JlLmNsZWFyQWN0aW9ucygpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ21lJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCd3aXRoIHZhbGlkIHRva2VuJywgKCkgPT4ge1xuICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGdsb2JhbC53aW5kb3cgPSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlOiB7XG4gICAgICAgICAgICByZW1vdmVJdGVtOiAoKSA9PiB7fSxcbiAgICAgICAgICAgIGdldEl0ZW06ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuICdzb21lLXRva2VuJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEl0ZW06ICgpID0+IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaXQoJ2V2ZW50dWFsbHkgZGlzcGF0Y2hlcyB0aGUgU0VUX0FVVEggYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBmYWtlVXNlciA9IHt1c2VybmFtZTogJ0NvZHknfVxuICAgICAgICBtb2NrQXhpb3Mub25HZXQoJy9hdXRoL21lJykucmVwbHlPbmNlKDIwMCwgZmFrZVVzZXIpXG4gICAgICAgIGF3YWl0IHN0b3JlLmRpc3BhdGNoKG1lKCkpXG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBzdG9yZS5nZXRBY3Rpb25zKClcbiAgICAgICAgZXhwZWN0KGFjdGlvbnNbMF0udHlwZSkudG8uYmUuZXF1YWwoJ1NFVF9BVVRIJylcbiAgICAgICAgZXhwZWN0KGFjdGlvbnNbMF0uYXV0aCkudG8uYmUuZGVlcC5lcXVhbChmYWtlVXNlcilcbiAgICAgIH0pXG4gICAgfSlcbiAgICBkZXNjcmliZSgnd2l0aG91dCB2YWxpZCB0b2tlbicsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBnbG9iYWwud2luZG93ID0ge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZToge1xuICAgICAgICAgICAgcmVtb3ZlSXRlbTogKCkgPT4ge30sXG4gICAgICAgICAgICBnZXRJdGVtOiAoKSA9PiB7fSxcbiAgICAgICAgICAgIHNldEl0ZW06ICgpID0+IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaXQoJ2RvZXMgbm90IGRpc3BhdGNoIEdFVCBVU0VSIGFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZmFrZVVzZXIgPSB7dXNlcm5hbWU6ICdDb2R5J31cbiAgICAgICAgbW9ja0F4aW9zLm9uR2V0KCcvYXV0aC9tZScpLnJlcGx5T25jZSgyMDAsIGZha2VVc2VyKVxuICAgICAgICBhd2FpdCBzdG9yZS5kaXNwYXRjaChtZSgpKVxuICAgICAgICBjb25zdCBhY3Rpb25zID0gc3RvcmUuZ2V0QWN0aW9ucygpXG4gICAgICAgIGV4cGVjdChhY3Rpb25zLmxlbmd0aCkudG8uZXF1YWwoMClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnbG9nb3V0JywgKCkgPT4ge1xuICAgIGl0KCdsb2dvdXQ6IGV2ZW50dWFsbHkgZGlzcGF0Y2hlcyB0aGUgU0VUX0FVVEggYWN0aW9uIHdpdGhhbiBlbXB0eSBvYmplY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXhpb3Mub25Qb3N0KCcvYXV0aC9sb2dvdXQnKS5yZXBseU9uY2UoMjA0KVxuICAgICAgYXdhaXQgc3RvcmUuZGlzcGF0Y2gobG9nb3V0KCkpXG4gICAgICBjb25zdCBhY3Rpb25zID0gc3RvcmUuZ2V0QWN0aW9ucygpXG4gICAgICBleHBlY3QoYWN0aW9uc1swXS50eXBlKS50by5iZS5lcXVhbCgnU0VUX0FVVEgnKVxuICAgICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvLmJlLmVxdWFsKCcvbG9naW4nKVxuICAgIH0pXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVFBLE1BQVIsUUFBcUIsTUFBckI7QUFDQSxTQUFRQyxFQUFSLEVBQVlDLE1BQVosUUFBeUIsUUFBekI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsV0FBUCxNQUF3QixvQkFBeEI7QUFDQSxPQUFPQyxrQkFBUCxNQUErQixrQkFBL0I7QUFDQSxPQUFPQyxlQUFQLE1BQTRCLGFBQTVCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixZQUFwQjtBQUVBLE1BQU1DLFdBQVcsR0FBRyxDQUFDRixlQUFELENBQXBCO0FBQ0EsTUFBTUcsU0FBUyxHQUFHSixrQkFBa0IsQ0FBQ0csV0FBRCxDQUFwQztBQUVBRSxRQUFRLENBQUMsZ0JBQUQsRUFBbUIsTUFBTTtFQUMvQixJQUFJQyxLQUFKO0VB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